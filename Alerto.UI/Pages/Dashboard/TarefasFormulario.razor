@page "/tarefas/nova"
@page "/tarefas/{IDTarefa:int}"
@layout DashboardLayout
@inject APIService api


@if (EditarTarefa == true)
{
    <h1 class=" text-Intermedia">Editar tarefa!!</h1>
}
else
{
    <div class=" flex flex-col items-center ">
        <div class="space-y-6 w-[90%]">
            <div>
                <h1 class=" text-2xl font-bold text-Primaria">Adicionar Nova Tarefa</h1>
                <p class=" text-sm text-Secundaria">Preeencha o formulario abaixo para adicionar uma nova tarefa.</p>
            </div>

            <AlertoInput T="string" value="@Tarefa.Tarefa" 
                         Icone="fa fa-check"
                         Placeholder="Nome da tarefa"></AlertoInput>

            <div class="flex space-x-4 ">
                <div class="w-4/5 gap-4 flex-col flex"  >
                    <!-- Categoria -->
                    <div class="relative w-full">
                    <span class="absolute inset-y-0 left-0 flex items-center pl-3 text-Primaria">
                        <i class="fa fa-folder"></i>
                    </span>
                        <select
                            @bind="Tarefa.Categoria"
                            class="w-full py-2 pl-10 rounded-lg border-2 border-Primaria  bg-transparent
                            caret-Intermedia text-Secundaria
                            focus:outline-none focus:border-Intermedia transition-all">
                            <option selected disabled>Selecione uma <!--     -->ategoria</option>
                            @foreach (var categoria in Categorias)
                            {
                                <option value="@categoria.Categoria">@categoria.Categoria</option>
                            }
                        </select>
                    </div>

                    <!-- Lista -->
                    <div class="relative w-full">
                    <span class="absolute inset-y-0 left-0 flex items-center pl-3 text-Primaria">
                        <i class="fa fa-list"></i>
                    </span>
                        <select
                            @bind="Tarefa.Lista"
                            class="w-full py-2 pl-10 rounded-lg border-2 border-Primaria bg-transparent
                            caret-Intermedia text-Secundaria
                            focus:outline-none focus:border-Intermedia transition-all">
                            <option selected disabled>Selecione uma lista de tarefas</option>
                            @foreach (var lista in Listas)
                            {
                                <option value="@lista.Lista">@lista.Lista</option>
                            }
                        </select>
                    </div>

                    <!-- Prioridade -->
                    <div class="relative w-full">
                    <span class="absolute inset-y-0 left-0 flex items-center pl-3 text-Primaria">
                        <i class="fa fa-flag"></i>
                    </span>
                        <select
                            @bind="Tarefa.Prioridade"
                            class="w-full py-2 pl-10 rounded-lg border-2 border-Primaria bg-transparent
                        caret-Intermedia text-Secundaria
                          focus:outline-none focus:border-Intermedia transition-all">
                            <option selected disabled>Selecione a prioridade</option>
                            <option value="alta">Alta</option>
                            <option value="media">Média</option>
                            <option value="baixa">Baixa</option>
                        </select>
                    </div>
                </div>
                <div class="w-1/5 gap-4 flex flex-col justify-center">
                    <!-- Data de Conclusão -->
                    <AlertoInputDate T="DateOnly" Tipo="date" ValueDate="@Tarefa.DataConclusao" Icone="fa fa-calendar" Placeholder="Data de Conclusao"></AlertoInputDate>
                    <!-- Hora de Conclusão -->
                    <AlertoInputDate T="TimeOnly" Tipo="time" ValueTime="@Tarefa.HoraConclusao" Icone="fa fa-clock" Placeholder="Hora de Conclusao"></AlertoInputDate>
                </div>
            </div>
            
            <textarea rows="10" class=" border-2 border-Primaria w-full rounded-md p-2"
                      @bind="Tarefa.Descricao"></textarea>

            <div class="gap-4 flex justify-between">
                <AlertoButton T="string" Tipo="primario" OnClick="NovaTarefa">@TextoBotao</AlertoButton>
                <AlertoButton T="string" Tipo="outline" OnClick="OpenModoChatoModal">Modo Chato</AlertoButton>
            </div>
            <p class="text-[red]">@TextoErro</p>
        </div>
    </div>
}

<ModoChatoModal ModoChato="ModoChato" OnModoChatoChanged="ModoChatoChanged"></ModoChatoModal>

@code {
    [Parameter] public int IDTarefa { get; set; }
    public CriaTarefaDTO Tarefa { get; set; } = new CriaTarefaDTO();
    public List<ListaAlteraCategorias> Categorias { get; set; } = new List<ListaAlteraCategorias>();
    public List<ListaAlteraListaTarefaDTO> Listas { get; set; } = new List<ListaAlteraListaTarefaDTO>();
    string TextoBotao = "Adicionar tarefa";
    string TextoErro = "";

    public ModoChatoDTO ModoChato { get; set; } = new ModoChatoDTO();

    bool EditarTarefa = false;

    protected override async void OnInitialized()
    {
        if (IDTarefa != 0)
            EditarTarefa = true;
        await SetarDados();
    }

    async void NovaTarefa()
    {
        TextoBotao = "Processando...";
        if (await api.CriarTarefa(Tarefa))
        {
            Rota.NavigateTo("/tarefas");
        }

        TextoBotao = "Adicionar tarefas";
        TextoErro = "Erro ao adicionar Tarefa";
    }

    async Task SetarDados()
    {
        Listas = await api.ListarListas();
        Categorias = await api.ListarCategorias();
        // Tarefa.DataConclusao = DateOnly.FromDateTime(DateTime.Now).AddDays(1);
        // Tarefa.HoraConclusao = TimeOnly.FromDateTime(DateTime.Now).AddHours(1);
        StateHasChanged();
    }

    private void ModoChatoChanged(ModoChatoDTO changedModoChato) => ModoChato = changedModoChato;
    private async Task OpenModoChatoModal() => await JSRuntimeExtensions.InvokeVoidAsync(js, "showOrHideModal", "modalModoChato", "true");
}